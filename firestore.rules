rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Lobbies collection - complex rules for multiplayer game
    match /lobbies/{lobbyId} {
      
      // Allow reading lobby data if user is authenticated
      allow read: if request.auth != null;
      
      // Allow creating a lobby if user is authenticated
      allow create: if request.auth != null && 
        // Ensure creator is adding themselves as a player
        request.auth.uid in resource.data.players.keys() &&
        // Limit lobby data structure
        request.resource.data.keys().hasAll(['id', 'lobbyCode', 'category', 'status', 'players', 'createdAt', 'lastActivity']) &&
        // Ensure reasonable limits
        request.resource.data.players.size() <= 10 &&
        request.resource.data.category is string &&
        request.resource.data.status in ['waiting_for_players', 'in_progress', 'completed'];
      
      // Allow updating lobby if user is a participant
      allow update: if request.auth != null && 
        (
          // User is already a player in the lobby
          request.auth.uid in resource.data.players.keys() ||
          // User is joining the lobby (being added to players)
          (request.auth.uid in request.resource.data.players.keys() && 
           request.resource.data.players.size() <= 10)
        ) &&
        // Prevent malicious modifications to core lobby structure
        request.resource.data.id == resource.data.id &&
        request.resource.data.lobbyCode == resource.data.lobbyCode &&
        request.resource.data.category == resource.data.category &&
        // Allow reasonable status transitions
        request.resource.data.status in ['waiting_for_players', 'in_progress', 'completed'] &&
        // Ensure lastActivity is updated
        request.resource.data.lastActivity is timestamp;
      
      // Allow deletion only by lobby creator (first player)
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.players.keys()[0];
    }
    
    // Game actions subcollection (if you add real-time game actions)
    match /lobbies/{lobbyId}/actions/{actionId} {
      // Allow reading actions for lobby participants
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys();
      
      // Allow creating actions for lobby participants
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys() &&
        request.resource.data.playerId == request.auth.uid &&
        request.resource.data.timestamp is timestamp;
    }
    
    // Category validation endpoint results (if you cache validation results)
    match /categories/{categoryName} {
      // Allow reading category data for all authenticated users
      allow read: if request.auth != null;
      
      // Only allow system/admin to write category data
      allow write: if false; // Categories should be managed through your API
    }
    
    // Game statistics/leaderboards (if you add them)
    match /leaderboards/{document} {
      allow read: if request.auth != null;
      // Only allow system updates to leaderboards
      allow write: if false;
    }
    
    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}